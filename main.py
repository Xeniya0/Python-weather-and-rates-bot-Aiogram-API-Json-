from aiogram import Bot, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.utils import executor
from keys import tokens
from img import cats
import random, requests, datetime
from keys.tokens import token_weather_api
from weather_correct import get_weather
from valutes import currency_rates


is_weather = False
token = tokens.token_bot
bot = Bot(token=token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

@dp.message_handler(commands=['start'])
async def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üñá –ú–µ–Ω—é")
    btn2 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞")
    btn3 = types.KeyboardButton("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç")
    btn4 = types.KeyboardButton("–í–æ—Ä–æ–Ω–µ–∂")
    btn5 = types.KeyboardButton("–ú–∏–ª–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ")
    btn6 = types.KeyboardButton("–ú–æ—Å–∫–≤–∞")

    markup.add(btn1, btn2, btn3, btn4, btn5, btn6)
    await bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ—Ç, –Ø –±–æ—Ç, —á–µ–º –ø–æ–º–æ—á—å?", reply_markup=markup)




class Form(StatesGroup):
    city = State()
    rates = State()

@dp.message_handler()
async def get_weth(message: types.Message):
    if message.text == "–ü–æ–≥–æ–¥–∞":
        await bot.send_message(message.from_user.id, '–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –Ω—É–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–≥–æ–¥—É?')
        await Form.city.set()
    elif message.text == "–ú–∏–ª–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ":
        await bot.send_photo(message.from_user.id, photo=open(random.choice(cats), 'rb'))
    elif message.text == "–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç":
        await bot.send_message(message.from_user.id, currency_rates('usd'))
        await bot.send_message(message.from_user.id, currency_rates('eur'))
        await bot.send_message(message.from_user.id, currency_rates('cny'))



@dp.message_handler(state=Form.city)
async def get_weathe(message: types.Message, state: FSMContext):
    async with state.proxy() as a:
        a['city'] = message.text
    await bot.send_message(message.from_user.id, get_weather(message.text, token_weather_api))
    await state.finish()



if __name__ == '__main__':
    executor.start_polling(dp)
    get_weather()
